name: Back CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - "back/**"
      - ".github/workflows/deploy-back.yml"
  workflow_dispatch: {}

concurrency:
  group: back-deploy
  cancel-in-progress: true

env:
  IMAGE_NAME: sentinel-back
  APP_NAME: sentinel-back
  EXPOSED_PORT: "3001"
  INTERNAL_PORT: "3001"
  NETWORK_NAME: sentinel-back

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=sha-${{ github.sha }}
            type=raw,value=v${{ github.run_number }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            set -euo pipefail

            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
            APP="${{ env.APP_NAME }}"
            NET="${{ env.NETWORK_NAME }}"
            EXTERNAL_PORT="${{ env.EXPOSED_PORT }}"
            INTERNAL_PORT="${{ env.INTERNAL_PORT }}"
            DATABASE_URL="mysql://app:apppass@mysql-sentinel:3306/sentinel_db"

            echo "==> Pull de l'image"
            docker pull "$IMAGE"

            echo "==> Réseau dédié back (idempotent)"
            docker network create "$NET" || true

            echo "==> Ensure MySQL exists (mysql-sentinel)"
            if ! docker ps -a --format '{{.Names}}' | grep -qx "mysql-sentinel"; then
              echo "Starting mysql-sentinel..."
              docker run -d \
                --name mysql-sentinel \
                --restart unless-stopped \
                --network "$NET" \
                -e MYSQL_ROOT_PASSWORD=root \
                -e MYSQL_DATABASE=sentinel_db \
                -e MYSQL_USER=app \
                -e MYSQL_PASSWORD=apppass \
                -e TZ=Europe/Paris \
                -v mysql-sentinel-data:/var/lib/mysql \
                mysql:8
            else
              echo "mysql-sentinel already exists; ensuring it is on network $NET"
              docker network connect "$NET" mysql-sentinel 2>/dev/null || true
              docker start mysql-sentinel || true
            fi

            echo "==> Wait for MySQL to be ready"
            for i in $(seq 1 60); do
              if docker exec mysql-sentinel sh -lc "mysqladmin ping -h 127.0.0.1 -uapp -papppass --silent"; then
                echo "MySQL is ready"; break
              fi
              sleep 2
            done

            echo "==> Existe-t-il déjà un container $APP ?"
            if docker ps -a --format '{{.Names}}' | grep -qx "$APP"; then
              docker stop "$APP" || true
              docker rm "$APP" || true
            fi

            echo "==> Run du nouveau container"
              docker run -d \
              --name "$APP" \
              --restart unless-stopped \
              --network "$NET" \
              -p "${EXTERNAL_PORT}:${INTERNAL_PORT}" \
              -e NODE_ENV=production \
              -e DATABASE_URL="$DATABASE_URL" \
              "$IMAGE"

            echo "==> Healthcheck API"
            for i in $(seq 1 30); do
              if curl -fsS "http://localhost:${EXTERNAL_PORT}/health" >/dev/null; then
                echo "Back OK sur port ${EXTERNAL_PORT}"
                exit 0
              fi
              sleep 2
            done
            echo "Healthcheck KO"; exit 1

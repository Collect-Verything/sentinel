name: Back CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - "back/**"
      - ".github/workflows/deploy-back.yml"
  workflow_dispatch: {}

concurrency:
  group: back-deploy
  cancel-in-progress: true

env:
  IMAGE_NAME: sentinel-back
  APP_NAME: sentinel-back
  EXPOSED_PORT: "3001"
  INTERNAL_PORT: "3001"
  NETWORK_NAME: sentinel-back

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=sha-${{ github.sha }}
            type=raw,value=v${{ github.run_number }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            set -euo pipefail
            
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
            APP="${{ env.APP_NAME }}"
            NET="${{ env.NETWORK_NAME }}"
            EXTERNAL_PORT="${{ env.EXPOSED_PORT }}"
            INTERNAL_PORT="${{ env.INTERNAL_PORT }}"
            
            MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE }}"
            MYSQL_USER="${{ secrets.MYSQL_USER }}"
            MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}"
            
            echo "==> Pull de l'image API"
            docker pull "$IMAGE"
            
            echo "==> Réseau dédié back (idempotent)"
            docker network create "$NET" >/dev/null 2>&1 || true
            
            echo "==> Détection/Provisioning MySQL"
            DB_HOST=""
            if docker ps -a --format '{{.Names}}' | grep -qx "mysql-sentinel"; then
              DB_HOST="mysql-sentinel"
              echo "   - MySQL existant détecté: $DB_HOST"
              docker network connect "$NET" "$DB_HOST" >/dev/null 2>&1 || true
              docker start "$DB_HOST" >/dev/null 2>&1 || true
            elif docker ps -a --format '{{.Names}}' | grep -qx "mysql-prod"; then
              DB_HOST="mysql-prod"
              echo "   - MySQL existant détecté: $DB_HOST"
              docker network connect "$NET" "$DB_HOST" >/devnull 2>&1 || true
              docker start "$DB_HOST" >/dev/null 2>&1 || true
            else
              DB_HOST="mysql-prod"
              echo "   - Aucun MySQL trouvé, création du conteneur $DB_HOST…"
              docker run -d \
              --name "$DB_HOST" \
              --restart unless-stopped \
              --network "$NET" \
              -e MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD" \
              -e MYSQL_DATABASE="$MYSQL_DATABASE" \
              -e MYSQL_USER="$MYSQL_USER" \
              -e MYSQL_PASSWORD="$MYSQL_PASSWORD" \
              -e TZ="Europe/Paris" \
              -v mysql-prod-data:/var/lib/mysql \
              mysql:8.0.43
            fi
            
            echo "==> Attente de disponibilité MySQL ($DB_HOST)"
            for i in $(seq 1 60); do
              if docker exec "$DB_HOST" sh -lc "mysqladmin ping -h 127.0.0.1 -u$MYSQL_USER -p$MYSQL_PASSWORD --silent"; then
                echo "   - MySQL OK"
                break
              fi
              sleep 2
            done
            
            # Construire la DATABASE_URL runtime avec l’hôte réellement utilisé
            RUNTIME_DATABASE_URL="mysql://$MYSQL_USER:$MYSQL_PASSWORD@$DB_HOST:3306/$MYSQL_DATABASE"
            
            echo "==> Remplacement propre de l'API ($APP)"
            if docker ps -a --format '{{.Names}}' | grep -qx "$APP"; then
              docker stop "$APP" >/dev/null 2>&1 || true
              docker rm "$APP"   >/dev/null 2>&1 || true
            fi
            
            echo "==> Lancement de la nouvelle API"
            docker run -d \
              --name "$APP" \
              --restart unless-stopped \
              --network "$NET" \
              -p "${EXTERNAL_PORT}:${INTERNAL_PORT}" \
              -e NODE_ENV=production \
              -e DATABASE_URL="$RUNTIME_DATABASE_URL" \
              "$IMAGE"
            
            echo "==> Healthcheck API"
            for i in $(seq 1 60); do
              if curl -fsS "http://localhost:${EXTERNAL_PORT}/health" >/dev/null; then
                echo "   - Back OK sur port ${EXTERNAL_PORT}"
                exit 0
              fi
              sleep 2
            done
            
            echo "Healthcheck KO"; exit 1


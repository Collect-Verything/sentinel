name: Deploy Sentinel Monitoring

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'sentinel/**'
      - '.github/workflows/deploy-sentinel-monitoring.yml'

concurrency:
  group: deploy-sentinel-monitoring-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-sentinel-monitoring:
    runs-on: ubuntu-latest
    steps:
      # 🪚 Verify directory if exist
      - name: Bootstrap server (idempotent)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            set -euo pipefail
            export DEBIAN_FRONTEND=noninteractive
            
            echo "==> APT update/upgrade"
            apt-get update -y
            apt-get upgrade -y || true
            apt-get install -y ca-certificates curl gnupg lsb-release rsync jq
            
            echo "==> Install Docker Engine + Compose v2 if missing"
            if ! command -v docker >/dev/null 2>&1; then
              install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
              https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) stable" \
              > /etc/apt/sources.list.d/docker.list
              apt-get update -y
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              systemctl enable --now docker
              fi
              
              echo "==> Docker versions"
              docker --version
              docker compose version
              
              
              echo "==> Done."


      # ⚒️ Install
      - name: Install sshpass on runner (for rsync over password SSH)
        run: sudo apt-get update && sudo apt-get install -y sshpass

      # 🕵 Verify directory if exist
      - name: Ensure target dir exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            set -e
            mkdir -p /root/sentinel-monitoring

      # 🏠 Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 🔁 Sync complet (ajouts/modifs/suppressions) du dossier sentinel-monitoring/ vers /root/sentinel-monitoring/
      - name: Rsync repo/sentinel-monitoring -> server:/root/sentinel-monitoring (with delete)
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          test -d sentinel-monitoring || { echo "Le dossier 'sentinel-monitoring/' n'existe pas dans le repo"; exit 1; }
          sshpass -e rsync -az --delete \
            -e "ssh -p 22 -o StrictHostKeyChecking=no" \
            sentinel-monitoring/ ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/root/sentinel-monitoring/

      # 🚀 Déploiement depuis /root/sentinel-monitoring
      - name: Compose deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            set -euo pipefail
            cd /root/sentinel-monitoring

            echo "==> Validation de la config"
            docker compose config >/dev/null

            echo "==> Pull des images (si :latest)"
            docker compose pull || true

            echo "==> Down ancienne stack"
            docker compose down --remove-orphans || true

            echo "==> Up nouvelle stack"
            docker compose up -d

            echo "==> Etat"
            docker compose ps

      # ✅ Sanity checks rapides
      - name: Health checks
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            set -e
            echo "Prometheus:" && curl -sf http://localhost:9090/-/ready && echo " OK"
            echo "Loki:"       && curl -sf http://localhost:3100/ready   && echo " OK"
            echo "Grafana:"    && curl -sf http://localhost:3000/login   && echo " OK"